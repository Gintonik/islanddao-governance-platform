You're building the final canonical native governance power scanner for IslandDAO, using Solana's Voter Stake Registry (VSR) on mainnet. Your goal is to calculate **accurate native governance power** per wallet using ONLY on-chain VSR data.

The scanner must:
1. Deserialize all VSR voter accounts from the program ID: `vsr2nfGVNHmSY8uxoBGqq8AQbwz3JwaEaHqGbsTPXqQ`
2. For each voter account, loop through **all deposits (max 32)**.
3. **For each deposit:**
   - Ignore empty or 1000 ISLAND "phantom" deposits
   - Match `authority` to the wallet, or to a known alias (from `wallet_aliases.json`)
   - Extract the lockup `endTs` from the byte offsets (+0 to +128 range, repeat all likely anchor struct patterns)
   - If the lockup is **already expired**, treat it as `1.00x`
   - If the lockup is **in the future**, apply the canonical multiplier formula:  
     `min(5, 1 + min(years_remaining, 4))`, where `years_remaining = (endTs - now) / 31,556,952`
   - Multiply deposit amount by the **individual multiplier** (no global multiplier!)
4. Sum the weighted deposits to get the **total native governance power** per wallet.

‚úÖ Wallets to validate against (MUST match exactly):
- `7pPJt2xoEoPy8x8Hf2D6U6oLfNa5uKmHHRwkENVoaxmA`  
  ‚ûù Native Governance Power: `8,709,019.78 ISLAND`
- `GJdRQcsyWZ4vDSxmbC5JrJQfCDdq7QfSMZH4zK8LRZue`  
  ‚ûù Native Governance Power: `144,708.981722 ISLAND`
- `6aJo6zRiC5CFnuE7cqw4sTtHHknrr69NE7LKxPAfFY9U`  
  ‚ûù Native Governance Power: `12,625.580931 ISLAND`

üß© Technical requirements:
- Use Node.js with `@coral-xyz/anchor` to decode accounts where possible.
- Fallback to `getProgramAccounts` with manual struct parsing for deposits.
- Search multiple byte offsets for each field (common offsets: 104, 112, 184, 192, 200, 208, 264, 272, 344, 352).
- Implement a **debug printout** per deposit:

[Wallet] Deposit #N

Amount: X ISLAND

Lockup End: YYYY-MM-DD

Multiplier: 1.XXXx

Voting Power: YYYYYYYY ISLAND


üì¶ Output:
- Save results to `canonical-native-results-verified.json`
- Print total power for each test wallet at the end.
- Flag any discrepancy greater than 0.5% with `‚ùå` in the final summary.
- Do **not** use any hardcoded multiplier per user ‚Äî all values must be derived from on-chain `endTs`.

Your job is to ensure we **never regress again**. This must be the final, locked version of the canonical native governance scanner.

Begin with the test wallets only. Once validated, you will expand to all wallets in the database.
