// File: full-canonical-vsr-validator.js

/**
 * GOAL: Canonical validator for VSR governance power (native + delegated)
 * REQUIREMENTS:
 * âœ… No hardcoded values
 * âœ… Anchor-compatible struct deserialization only
 * âœ… Validates native deposits using authority === wallet
 * âœ… Validates delegated power using voterAuthority === wallet && authority !== wallet
 * âœ… Logs each deposit with index, amount, lockup type, multiplier, calculated power
 * âœ… Logs each delegation with source wallet, target wallet, and amount
 */

import * as anchor from '@coral-xyz/anchor';
import { Connection, PublicKey } from '@solana/web3.js';
import { deserializeAccountRaw } from '@coral-xyz/anchor/dist/cjs/program/namespace/account';
import vsrIdl from './vsr-idl.json' assert { type: 'json' };
import bs58 from 'bs58';
import dotenv from 'dotenv';
dotenv.config();

const VSR_PROGRAM_ID = new PublicKey('vsr2nfGVNHmSY8uxoBGqq8AQbwz3JwaEaHqGbsTPXqQ');
const connection = new Connection(process.env.HELIUS_RPC_URL, 'confirmed');
const provider = new anchor.AnchorProvider(connection, {} as any, {});
const program = new anchor.Program(vsrIdl, VSR_PROGRAM_ID, provider);

// Load wallets from your citizens table (or hardcoded temporarily for test)
const WALLET_ADDRESSES = [
  '3PKhzE9wuEkGPHHu2sNCvG86xNtDJduAcyBPXpE6cSNt',
  'Fywb7YDCXxtD7pNKThJ36CAtVe23dEeEPf7HqKz7sE9p',
  '4pT6ESaMQTgGPZXmR3nwwyPYzF7gX5Bdc3o5VLseWbMJ',
  '7pPJt2xoEoPDNwfw2Hikzcc28JYkFmv6G4q7Mgnzvh5Z',
  'kruHL3zJ1Mcbdibsna5xM6yMp7PZZ4BsNTpj2UMgvZC',
  'GJdRQcsyz49FMM4LvPqpaM2QA3yWFr8WamJ95hkwCBAh'
].map((addr) => new PublicKey(addr));

function calculateMultiplier(lockup) {
  if (lockup.lockupKind === 0 || lockup.lockupEndTs.eqn(0)) return 1.0;
  const now = Math.floor(Date.now() / 1000);
  const secondsRemaining = Math.max(0, lockup.lockupEndTs.toNumber() - now);
  const years = secondsRemaining / (365.25 * 24 * 3600);
  return Math.min(1 + years, 5);
}

async function scanAllGovernancePower() {
  const accounts = await connection.getProgramAccounts(VSR_PROGRAM_ID, {
    filters: [{ dataSize: 2728 }] // Matches Voter account
  });

  const walletPowerMap = {};

  for (const { pubkey, account } of accounts) {
    const decoded = deserializeAccountRaw(program.idl, 'voter', account.data);
    const authority = decoded.authority.toBase58();
    const voterAuthority = decoded.voterAuthority.toBase58();

    // Parse all deposits
    let nativePower = 0;
    let delegatedPower = 0;

    for (let i = 0; i < decoded.depositEntries.length; i++) {
      const entry = decoded.depositEntries[i];
      const amount = entry.amountDepositedNative.toNumber() / 1e9;
      const multiplier = calculateMultiplier(entry.lockup);
      const power = amount * multiplier;

      // Filter out invalid entries
      if (amount === 0) continue;

      const entryInfo = {
        index: i,
        amount,
        multiplier,
        power,
        authority,
        voterAuthority,
      };

      // Native: authority === wallet
      if (WALLET_ADDRESSES.some((wallet) => wallet.toBase58() === authority)) {
        nativePower += power;
        walletPowerMap[authority] = walletPowerMap[authority] || { native: 0, delegated: 0 };
        walletPowerMap[authority].native += power;

        console.log(`ðŸŸ¢ Native | ${authority} | Deposit #${i} | Amount: ${amount} | Multiplier: ${multiplier.toFixed(2)} | Power: ${power.toFixed(2)}`);
      }

      // Delegated: voterAuthority === wallet AND authority !== voterAuthority
      if (
        WALLET_ADDRESSES.some((wallet) => wallet.toBase58() === voterAuthority) &&
        authority !== voterAuthority
      ) {
        delegatedPower += power;
        walletPowerMap[voterAuthority] = walletPowerMap[voterAuthority] || { native: 0, delegated: 0 };
        walletPowerMap[voterAuthority].delegated += power;

        console.log(`ðŸ”µ Delegated | From ${authority} â†’ ${voterAuthority} | Deposit #${i} | Power: ${power.toFixed(2)}`);
      }
    }
  }

  console.log('\n====================== Final Power Summary ======================\n');
  for (const [wallet, powers] of Object.entries(walletPowerMap)) {
    const total = (powers.native + powers.delegated).toFixed(2);
    console.log(`Wallet: ${wallet}\n - Native: ${powers.native.toFixed(2)}\n - Delegated: ${powers.delegated.toFixed(2)}\n - Total: ${total}\n`);
  }
}

scanAllGovernancePower();
