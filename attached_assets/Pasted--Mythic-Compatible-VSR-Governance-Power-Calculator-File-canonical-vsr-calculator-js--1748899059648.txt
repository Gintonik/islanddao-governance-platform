// 🧠 Mythic-Compatible VSR Governance Power Calculator
// 📁 File: canonical-vsr-calculator.js

import dotenv from "dotenv";
dotenv.config();

import { Connection, PublicKey } from "@solana/web3.js";
import { AnchorProvider, Program, utils } from "@coral-xyz/anchor";
import vsrIdl from "./vsr-idl.json" assert { type: "json" };

// ✅ Constants
const VSR_PROGRAM_ID = new PublicKey("vsr2nfGVNHmSY8uxoBGqq8AQbwz3JwaEaHqGbsTPXqQ");
const RPC_URL = process.env.HELIUS_RPC_URL;

// 📡 Setup
const connection = new Connection(RPC_URL);
const provider = new AnchorProvider(connection, {}, {});
const program = new Program(vsrIdl, VSR_PROGRAM_ID, provider);

// 🔬 Mythic-style voting power calculation
function calculateMultiplier(lockup) {
  switch (lockup.kind) {
    case { none: {} }:
      return 1.0;
    case { daily: {} }:
    case { monthly: {} }:
    case { cliff: {} }:
      const now = Math.floor(Date.now() / 1000);
      const start = lockup.startTs.toNumber();
      const end = start + lockup.duration.toNumber();
      const base = 1.0;
      const max = lockup.multiplier.toNumber() / 100;
      if (now >= end) return base;
      const remaining = end - now;
      return base + (max - base) * (remaining / lockup.duration.toNumber());
    default:
      return 1.0;
  }
}

// 🧪 Benchmark Wallets
const wallets = [
  "7pPJt2xoEoPy8x8Hf2D6U6oLfNa5uKmHHRwkENVoaxmA", // Takisoul
  "GJdRQcsyz49FMM4LvPqpaM2QA3yWFr8WamJ95hkwCBAh", // GJdR
  "4pT6ESaMQTgpMs2ZZ81pFF8BieGtY9x4CCK2z6aoYoe4", // 4pT6
  "Fgv1zrwB6VF3jc45PaNT5t9AnSsJrwb8r7aMNip5fRY1", // Fgv1
];

(async () => {
  for (const wallet of wallets) {
    console.log(`\n🔎 Testing wallet: ${wallet}`);
    const filter = {
      memcmp: {
        offset: 8,
        bytes: wallet,
      },
    };

    const accounts = await connection.getProgramAccounts(VSR_PROGRAM_ID, {
      filters: [
        { dataSize: 2728 },
        filter,
      ],
    });

    let totalPower = 0;

    for (const { pubkey, account } of accounts) {
      const voter = await program.account.voter.fetch(pubkey).catch(() => null);
      if (!voter) {
        console.warn(`❌ Failed to decode voter: ${pubkey.toBase58()}`);
        continue;
      }

      voter.depositEntries.forEach((entry, i) => {
        const isUsed = entry.isUsed;
        if (!isUsed) return;

        const amount = entry.amount.toNumber() / 1e6; // ISLAND uses 6 decimals
        const lockup = entry.lockup;
        const multiplier = calculateMultiplier(lockup);

        const votingPower = amount * multiplier;
        totalPower += votingPower;

        console.log(
          `#${i} - amount: ${amount.toFixed(2)} × multiplier: ${multiplier.toFixed(
            2
          )} = ${votingPower.toFixed(2)}`
        );
      });
    }

    console.log(`✅ Total Governance Power: ${totalPower.toFixed(2)} ISLAND`);
  }
})();
